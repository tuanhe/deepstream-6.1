################################################################################
# Copyright (c) 2020-2021, NVIDIA CORPORATION.  All rights reserved.
#
# NVIDIA Corporation and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA Corporation is strictly prohibited.
#
################################################################################

This module implements protocol adaptor for Redis.
The adaptor implements and exposes the DSMI API for client applications to interface with it.

Dependencies
-------------
* glib 2.0

  apt-get install libglib2.0 libglib2.0-dev libssl-dev

Build dependencies with installation instructions:
* libhiredis
  Note that for using TLS/SSL security, make sure to build libhiredis with
  SSL suport enabled by using the USE_SSL option as specified in the
  README here: https://github.com/redis/hiredis

  git clone https://github.com/redis/hiredis.git
  cd hiredis
  git reset --hard d5b4c69b7113213c1da3a0ccbfd1ee1b40443c7a
  make USE_SSL=1
  sudo cp libhiredis* /opt/nvidia/deepstream/deepstream/lib/
  sudo ln -sf /opt/nvidia/deepstream/deepstream/lib/libhiredis.so /opt/nvidia/deepstream/deepstream/lib/libhiredis.so.1.0.1-dev
  sudo ln -sf /opt/nvidia/deepstream/deepstream/lib/libhiredis_ssl.so /opt/nvidia/deepstream/deepstream/lib/libhiredis.so.1.0.1-dev-ssl
  sudo ldconfig


(optional) : Install & setup redis-server on your machine
---------------------------------------------------------
Follow instructions here and download the redis version(6.0.8) : https://redis.io/download

  ex: Installation
  ----------------
  $ wget http://download.redis.io/releases/redis-6.0.8.tar.gz
  $ tar xzf redis-6.0.8.tar.gz
  $ cd redis-6.0.8
  $ make

  Run the server
  --------------
  $ src/redis-server &

NOTE:
By default, Redis server runs in protected mode. In this mode connections are only accepted from the loopback interface.
If you want to connect from external computers to Redis you may use one of the following solutions:
1) Run redis server with '--protected-mode no' option.
     $ src/redis-server --protected-mode no
2) If you don't want to restart the redis server, use redis-cli on the host where redis is installed and
   disable protected mode by sending command 'CONFIG SET protected-mode no'
     $ src/redis-cli
     127.0.0.1:6379> CONFIG SET protected-mode no

Redis client cfg:
-----------------
You can add Redis configuration and connection related details in cfg_redis.txt
Uncomment the fields you may want to edit and add proper values

example:
[message-broker]
#hostname=localhost
#port=6379
#payloadkey=metadata
#consumergroup=mygroup
#consumername=myname
#streamsize=10000
#share-connection = 1

- You have the option to specify the max stream size for the stream where data is being published.
  Uncomment the field streamsize in cfg_redis.txt and provide redis stream size value
  More info on redis capped streams can be found here: https://redis.io/topics/streams-intro

- Option to specify the redis stream key for the payload : https://redis.io/topics/streams-intro

- Option to specify consumer groupname and the consumer name
  More info on redis streams consumer groups : https://redis.io/commands/xgroup

- Uncomment the field share-connection and set it to value 1 if you need to generate a
  connection signature. This signature is a unique string which is generated by parsing all the
  Redis connection related params used for making a connection.
  Uncommenting this field signifies that the connection created can be shared
  with other components within the same process.

NOTE:
1.  Redis streams data structure is used in the Redis adapter library
2.  Redis connection string (host;port) must be specified in call to connect
    ex: nvds_msgapi_connect("hostname;port" , (nvds_msgapi_connect_cb_t) sample_msgapi_connect_cb, (char *)CFG_FILE);
3.  The publish message key being used is "sensor.id". Applicable for all the messages published via redis adapter library
4.  Default consumer group name = redis-consumer-group
    Default consumer name = redis-consumer
    cfg_redis.txt has option to specify a different consumer groupname/consumer name and override the default

Redis protocol Adapter
-----------------------
Redis adapter library can be found at /opt/nvidia/deepstream/deepstream/lib/libnvds_redis_proto.so
Refer to sample test programs for illustration of using the adaptor.

Sample programs
---------------
To build test program execute 'make -f Makefile.test'

NOTE: To compile the sources, run make with "sudo" or root permission.

Make sure to modify the address for the Redis broker being connected to as part of the call to msgapi_connect_ptr:

  conn_handle = msgapi_connect_ptr((char *)"yourserver.yourdomain.net;6379",(nvds_msgapi_connect_cb_t) sample_msgapi_connect_cb, (char *)CFG_FILE);

Subscribing to topic(s)
example:
  const char *topics[] = {"yourtopic1", "yourtopic2"};
  int num_topics = 2;
  msgapi_subscribe_ptr(conn_handle, (char **)topics, num_topics, subscribe_cb, &consumed_cnt);

Publishing on a topic
example:
  msgapi_send_ptr(conn_handle, (char *)topic, (const uint8_t*) SEND_MSG, strlen(SEND_MSG));

Before running the sample applications, enable logs by running the logger setup script:
--------------------------------------------------------------------------------------
 chmod u+x /opt/nvidia/deepstream/deepstream/sources/tools/nvds_logger/setup_nvds_logger.sh
 sudo /opt/nvidia/deepstream/deepstream/sources/tools/nvds_logger/setup_nvds_logger.sh

 Note that for complete set of logs, set the logger level to 7 (DEBUG), as described in the logger README.

To run test program:
--------------------
  ./test_redis_proto_sync
  ./test_redis_proto_async
