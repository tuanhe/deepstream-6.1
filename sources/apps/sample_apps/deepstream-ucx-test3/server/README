*****************************************************************************
* Copyright (c) 2022 NVIDIA Corporation.  All rights reserved.
*
* NVIDIA Corporation and its licensors retain all intellectual property
* and proprietary rights in and to this software, related documentation
* and any modifications thereto.  Any use, reproduction, disclosure or
* distribution of this software and related documentation without an express
* license agreement from NVIDIA Corporation is strictly prohibited.
*****************************************************************************

*****************************************************************************
                     deepstream-ucx-test3-app
                             README
*****************************************************************************

===============================================================================
1. Prerequisites:
===============================================================================

Please follow instructions in the apps/sample_apps/deepstream-app/README on how
to install the prequisites for Deepstream SDK, the DeepStream SDK itself and the
apps. Also, please read the information about the Gst-NvDsUcx plugin within the
Deepstream SDK.

This test requires the availability of an NVIDIA ConnectX-6 DX or later NIC.
For more information on installing and configuring NICs, please see:
https://docs.nvidia.com/networking/display/ConnectX6VPI/Introduction

To be able to run the test over an RDMA-enabled network, please
ensure you have also installed the RDMA OFED network stack from here:
https://network.nvidia.com/products/infiniband-drivers/linux/mlnx_ofed/. The
installation instructions can be found here:
https://docs.nvidia.com/networking/display/MLNXOFEDv551032/Installing+MLNX_OFED.

Also, install the Unified Communication-X Library from here:
https://github.com/openucx/ucx. The installation instructions are mentioned here:
https://github.com/openucx/ucx#release-builds. Please note, that UCX library
should be compiled with CUDA support by adding the --with-cuda=<path/to/cuda> 
to the configure command:

$ ./contrib/configure-release --prefix=/install/path --with-cuda=/path/to/cuda

You must have the following development packages installed
   GStreamer-1.0
   GStreamer-1.0 Base Plugins
   GStreamer-1.0 gstrtspserver
   X11 client-side library

To install these packages, execute the following command:
   sudo apt-get install libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev \
   libgstrtspserver-1.0-dev libx11-dev

Install the plugins provided by the Gst-NvDsMetaUtils library, see below.

===============================================================================
2. Purpose:
===============================================================================

This document describes the sample deepstream-ucx-test3 application.

The deepstream-ucx-test3 application is meant to show a simple demonstration of
how to use the new communication plugin called nvdsgst_ucx with the Deepstream SDK
along with the new custom audio serialization and deserialization library called
libnvds_audio_metadata_serialization.so. This allows division of the audio-based
Deepstream pipeline into running on separate processes or hosts.
Please consult the documentation for the Gst-NvDsMetaUtils library that utilizes
these libraries.

===============================================================================
3. To compile:
===============================================================================

  $ Set CUDA_VER to 11.6 for x86.
  $ sudo make

Note, the nvdsgst_ucx plugin is not supported on Jetson.

===============================================================================
4. Usage:
===============================================================================

To run:
  1. This test utilizes a custom library to serialize and deserialize the
     metadata generated by the nvstreammux plugin. Ensure that you have compiled
     the audio_metadata_serialization library in the gst-nvdsmetautils folder.

     For installing the plugins provided by Gst-NvDsMetaUtils, do the following 
     on both client and server machines:

     $ cd /opt/nvidia/deepstream/deepstream/sources/gst-plugins/gst-nvdsmetautils/audio_metadata_serialization
     $ make and sudo make install

  2. This application requires the new nvstreammux plugin. Before the server or
     client is started, the environment variable USE_NEW_NVSTREAMMUX=yes must
     be set on the command line.

     $ export USE_NEW_NVSTREAMMUX=yes

  3. Run the server application first. Required parameters (in order) are the
     IP address of server, Port, Path to the audio metadata serialization
     (libnvds_audio_metadata_serialization.so) library, Path to input file.
     For example,

     $ ./deepstream-ucx-test3-app-server 192.168.100.1 4000 \
     /opt/nvidia/deepstream/deepstream-6.1/lib/libnvds_audio_metadata_serialization.so \
     /path/to/file.mp4

  4. Run the client application next. Required parameters (in order) are the
     IP address of server, Port on server, Path to the audio metadata
     serialization library, Path to output audio file. For example,

     $ ./deepstream-ucx-test3-app-client 192.168.100.1 4000 \
     /opt/nvidia/deepstream/deepstream-6.1/lib/libnvds_audio_metadata_serialization.so \
     /path/to/output_file.wav

NOTE: To compile the sources, run make with "sudo" or root permission.

The Deepstream pipeline here is configured to decode the audio from a file and forward
it to the nvstreammux plugin. The new audio serialization plugin is used to read the
metadata added by the nvstreammux. It serializes this metadata and appends it to the
buffer. The serversink element of the nvdsgst_ucx plugin sends the audio data from the
NVAudio buffer and the serialized metadata to the clientsrc element running in a
different process or host.

The clientsrc element forwards this audio and metadata to the metadata plugin which
reinserts the metadata into the new buffer created in this process. The demux and
the audioconverter send the audio data to filesink for output.
