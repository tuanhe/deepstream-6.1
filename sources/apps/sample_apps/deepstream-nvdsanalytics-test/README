*****************************************************************************
* Copyright (c) 2020-2022 NVIDIA Corporation.  All rights reserved.
*
* NVIDIA Corporation and its licensors retain all intellectual property
* and proprietary rights in and to this software, related documentation
* and any modifications thereto.  Any use, reproduction, disclosure or
* distribution of this software and related documentation without an express
* license agreement from NVIDIA Corporation is strictly prohibited.
*****************************************************************************

*****************************************************************************
                     deepstream-nvdsanalytics-test
                             README
*****************************************************************************

===============================================================================
1. Prerequisites:
===============================================================================

Please follow instructions in the apps/sample_apps/deepstream-app/README on how
to install the prerequisites for the Deepstream SDK, the DeepStream SDK itself,
and the apps.

You must have the following development packages installed
   GStreamer-1.0
   GStreamer-1.0 Base Plugins
   GStreamer-1.0 gstrtspserver
   X11 client-side library

To install these packages, execute the following command:
   sudo apt-get install libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev \
   libgstrtspserver-1.0-dev libx11-dev

===============================================================================
2. Purpose:
===============================================================================

This document describes the sample deepstream-nvdsanalytics-test application.

This sample builds on top of the deepstream-test3 sample to demonstrate how to:

* Demonstrate use of nvdsanalytics gstreamer plugin
* Extract the nvdsanalytics metadata, which contains useful information about the
  frames in the batched buffer.
* Refer plugin manual for configuration of nvdsanalytics plugin property

===============================================================================
3. To compile:
===============================================================================

  $ Set CUDA_VER in the MakeFile as per platform.
      For Jetson, CUDA_VER=11.4
      For x86, CUDA_VER=11.6
  $ sudo make

NOTE: To compile the sources, run make with "sudo" or root permission.

===============================================================================
4. Usage:
===============================================================================

To run:
  $ ./deepstream-nvdsanalytics-test <uri1> [uri2] ... [uriN]
e.g.
  $ ./deepstream-nvdsanalytics-test file:///home/ubuntu/video1.mp4 file:///home/ubuntu/video2.mp4
  $ ./deepstream-nvdsanalytics-test rtsp://127.0.0.1/video1 rtsp://127.0.0.1/video2

This sample accepts one or more H.264/H.265 video streams as input. It creates
a source bin for each input and connects the bins to an instance of the
"nvstreammux" element, which forms the batch of frames. The batch of
frames is fed to "nvinfer" for batched inferencing. The batched buffer is
composited into a 2D tile array using "nvmultistreamtiler." The rest of the
pipeline is similar to the deepstream-test1 sample.

The "width" and "height" properties must be set on the stream-muxer to set the
output resolution. If the input frame resolution is different from
stream-muxer's "width" and "height", the input frame will be scaled to muxer's
output resolution.

The stream-muxer waits for a user-defined timeout before forming the batch. The
timeout is set using the "batched-push-timeout" property. If the complete batch
is formed before the timeout is reached, the batch is pushed to the downstream
element. If the timeout is reached before the complete batch can be formed
(which can happen in case of rtsp sources), the batch is formed from the
available input buffers and pushed. Ideally, the timeout of the stream-muxer
should be set based on the framerate of the fastest source. It can also be set
to -1 to make the stream-muxer wait infinitely.

The "nvinfer" detects objects and attach the metadata with the batched buffer.

The "nvtracker" tracks the detected object and provides unique-id to each of them

The "nvdsanalytics" plugin does analytics on the tracked output for Line crossing/
Direction Detection/ROI Filtering/Overcrowding detection. It attaches results as
object metadata and frame metadata with each of the frame and sends it down for
further processing. Refer "nvds_analytics_meta.h" on how the metadata is stored,
and it is accessed in the app using nvdsanalytics_src_pad_buffer_probe() function.
Per class object count is also stored in the frame metadata.

The "nvmultistreamtiler" composite streams based on their stream-ids in
row-major order (starting from stream 0, left to right across the top row, then
across the next row, etc.).

The "nvdsosd" performs drawing on on the composited frame, i.e. object bbox, ROI
info, direction and linecrossing info etc.

--------------------------------------------------------------------------------
The nvdsanalytics plugin can also be used along with reference deepstream-app,
this can be done by doing corresponding config file changes (Add the following section), in
deepstream-app configuration file. Provide config-file property with relative or
exact path of nvdsanalytics plugin property file.

[nvds-analytics]
enable=1
config-file=config_nvdsanalytics.txt

In order to access the meta data programmatically in reference deepstream-app
compile the custom deepstream-app as given below. Function for accessing meta is
available in deepstream_nvdsanalytics_meta.cpp

  $ make -f Makefile.ds
  $ ./deepstream-app -c <config file>

Known Issue:
On Jetson, if libgomp is not preloaded, this error may occur:
(deepstream-nvdsanalytics-test:19931): GStreamer-WARNING **: 00:44:37.356: Failed to load plugin '/usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstlibav.so': /usr/lib/aarch64-linux-gnu/libgomp.so.1: cannot allocate memory in static TLS block

To work around the problem with TLS usage limitation.
  Add to LD_PRELOAD:
  /usr/lib/aarch64-linux-gnu/libgomp.so.1
