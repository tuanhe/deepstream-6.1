*****************************************************************************
* Copyright (c) 2018-2022 NVIDIA Corporation.  All rights reserved.
*
* NVIDIA Corporation and its licensors retain all intellectual property
* and proprietary rights in and to this software, related documentation
* and any modifications thereto.  Any use, reproduction, disclosure or
* distribution of this software and related documentation without an express
* license agreement from NVIDIA Corporation is strictly prohibited.
*****************************************************************************


*****************************************************************************
                     deepstream-test2-app
                            README
*****************************************************************************

===============================================================================
1. Prerequisites:
===============================================================================

Please follow instructions in the apps/sample_apps/deepstream-app/README on how
to install the prequisites for Deepstream SDK, the DeepStream SDK itself and the
apps.

You must have the following development packages installed
   GStreamer-1.0
   GStreamer-1.0 Base Plugins
   GStreamer-1.0 gstrtspserver
   X11 client-side library

To install these packages, execute the following command:
   sudo apt-get install libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev \
   libgstrtspserver-1.0-dev libx11-dev

===============================================================================
2. Purpose:
===============================================================================

In this sample, one instance of "nvinfer" referred as the pgie, has been created.
This is a 4 class detector and it detects for "Vehicle , RoadSign, TwoWheeler,
Person". After this a "nvtracker" instance is linked which tracks the objects
detected by the pgie. After this 3 more instances of "nvinfer"
referred to as sgie1, sgie2, sgie3 respectively has been created.

===============================================================================
3. To compile:
===============================================================================

$ Set CUDA_VER in the MakeFile as per platform.
    For Jetson, CUDA_VER=11.4
    For x86, CUDA_VER=11.6
$ sudo make

===============================================================================
4. Usage:
===============================================================================

  Two ways to run the application:

  1.Run with the h264 elementary stream. In this method, user needs to modify the source
    code of deepstream-test2-app to configure pipeline properties.

    $ ./deepstream-test2-app <h264_elementary_stream>
  2.Run with the yml file. In this method, user needs to update the yml file to configure
    pipeline properties.

    $ ./deepstream-test2-app <yml file>
    e.g. ./deepstream-test2-app dstest2_config.yml

NOTE: To compile the sources, run make with "sudo" or root permission.

This document shall describe about the sample deepstream-test2 application.

It is meant for simple demonstration of how to use the various DeepStream SDK
elements in the pipeline and extract meaningful insights from a video stream.

This sample creates multiple instances of "nvinfer" element. Each instance of
the "nvinfer" uses TensorRT API to infer on frames/objects. Every
instance is configured through its respective config file. Using a correct
configuration for a nvinfer element instance is therefore very important as
considerable behaviors of the instance are parameterized through these configs.

For reference, here are the config files used for this sample :
1. The 4-class detector (referred to as pgie in this sample) uses
    dstest2_pgie_config.txt
2. The vehicle color classifier (referred to as sgie1 in this sample) uses
    dstest2_sgie1_config.txt
3. The vehicle make classifier (referred to as sgie2 in this sample) uses
    dstest2_sgie2_config.txt
4. The vehicle type classifier (referred to as sgie3 in this sample) uses
    dstest2_sgie3_config.txt
5. The tracker (referred to as nvtracker in this sample) uses
    dstest2_tracker_config.txt

Each of the nvinfer elements attach some MetaData to the buffer. By attaching
the probe function at the end of the pipeline, one can extract meaningful
information from these inferences. Please refer the "osd_sink_pad_buffer_probe"
function in the sample code. For details on the Metadata format, refer to the
file "gstnvdsmeta.h"
